# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#

name: 'Terraform Deployment'
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PIPELINE }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PIPELINE }}

on:
  push:
    branches: [ "pipeline" ]
  pull_request:

permissions:
  contents: read

jobs:
  deploy:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout code
      uses: actions/checkout@v4

    # Restore cached Terraform plugins
    - name: Restore Terraform cache
      uses: actions/cache@v3
      with:
        path: backend/aws-infra/.terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('backend/aws-infra/*.tf') }}

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # Change this to your region

    - name: Create tfvars file
      run: |
        echo "oauth_token = \"${{ secrets.OAUTH_TOKEN_GITHUB }}\"" > terraform.tfvars

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=backend/aws-infra/ init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform -chdir=backend/aws-infra/ fmt -check

    - name: Check if RDS exists and import
      id: check_rds
      run: |
        if aws rds describe-db-instances --db-instance-identifier "cbt" > /dev/null 2>&1; then
          echo "RDS_EXISTS=true" >> $GITHUB_ENV
          terraform -chdir=backend/aws-infra/ import module.rds.aws_db_instance.rds_instance cbt
        else
          echo "RDS_EXISTS=false" >> $GITHUB_ENV
        fi

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=backend/aws-infra/ plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform -chdir=backend/aws-infra/ apply -var 'oauth_token=${{ secrets.OAUTH_TOKEN_GITHUB }}' -var="rds_exists=${{ env.RDS_EXISTS }}" -auto-approve -input=false
      if: github.ref == 'refs/heads/pipeline' && github.event_name == 'push'
